package com.sondv.phone.service;

import com.sondv.phone.dto.ChatResponse;
import com.sondv.phone.model.Message;
import com.sondv.phone.model.Product;
import com.sondv.phone.repository.MessageRepository;
import com.sondv.phone.repository.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.text.Normalizer;
import java.text.NumberFormat;
import java.time.LocalTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;

@Service
@RequiredArgsConstructor
public class ChatbotService {

    private static final Logger logger = LoggerFactory.getLogger(ChatbotService.class);

    private final ProductRepository productRepository;
    private final MessageRepository messageRepository;
    private final OpenAiClient openAiClient;

    private final Long BOT_ID = 0L;
    private final Locale locale = new Locale("vi", "VN");
    private final Random random = new Random();

    // Cache k·∫øt qu·∫£ t√¨m ki·∫øm
    private final Map<String, String> searchCache = new ConcurrentHashMap<>();
    private final RestTemplate restTemplate = new RestTemplate();

    // URL c·ªßa API n·ªôi b·ªô
    private static final String PRODUCT_API_URL = "http://localhost:8080/api/products";

    // Danh s√°ch c√°c l·ªùi ch√†o ƒëa d·∫°ng
    private final List<String> greetings = Arrays.asList(
            "Xin ch√†o anh/ch·ªã ·∫°! Em l√† tr·ª£ l√Ω b√°n h√†ng c·ªßa DoanSon Store üëã Em c√≥ th·ªÉ t∆∞ v·∫•n gi√∫p g√¨ cho anh/ch·ªã h√¥m nay ·∫°?",
            "Ch√†o anh/ch·ªã! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ anh/ch·ªã üòä Shop ch√∫ng em ƒëang c√≥ nhi·ªÅu ∆∞u ƒë√£i h·∫•p d·∫´n v·ªÅ ƒëi·ªán tho·∫°i ƒë·∫•y ·∫°!",
            "K√≠nh ch√†o qu√Ω kh√°ch! üåü Em l√† tr·ª£ l√Ω t·∫°i DoanSon Store, anh/ch·ªã ƒëang t√¨m ki·∫øm d√≤ng ƒëi·ªán tho·∫°i n√†o ·∫°?"
    );

    private final List<String> promotions = Arrays.asList(
            "üî• HOT! Em xin chia s·∫ª ngay ·∫°: Hi·ªán t·∫°i shop ƒëang gi·∫£m ƒë·∫øn 2 TRI·ªÜU cho iPhone 14 Pro, Samsung A54 gi·∫£m 1.5 TRI·ªÜU, v√† Redmi Note 12 gi·∫£m 800K! Anh/ch·ªã quan t√¢m ƒë·∫øn d√≤ng m√°y n√†o ·∫°? üéÅ",
            "üéâ D·∫° anh/ch·ªã ƒë·∫øn ƒë√∫ng th·ªùi ƒëi·ªÉm r·ªìi ·∫°! Shop ƒëang c√≥ ch∆∞∆°ng tr√¨nh S·ªêC: Gi·∫£m ngay 2 TRI·ªÜU cho iPhone 14 Pro, tr·∫£ g√≥p 0%, b·∫£o h√†nh VIP 18 th√°ng! Samsung v√† Xiaomi c≈©ng ƒëang c√≥ ∆∞u ƒë√£i c·ª±c kh·ªßng. Em c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt h∆°n v·ªÅ s·∫£n ph·∫©m n√†o ·∫°?",
            "‚ö° SI√äU SALE th√°ng n√†y anh/ch·ªã ∆°i! iPhone 14 Pro gi·∫£m 2 TRI·ªÜU + t·∫∑ng tai nghe AirPods, Samsung A54 gi·∫£m 1.5 TRI·ªÜU + t·∫∑ng ·ªëp l∆∞ng x·ªãn, Redmi Note 12 gi·∫£m 800K + t·∫∑ng s·∫°c d·ª± ph√≤ng! Anh/ch·ªã mu·ªën em g·ª≠i th√¥ng tin chi ti·∫øt v·ªÅ m·∫´u n√†o ·∫°? üíØ"
    );

    private final List<String> unclear = Arrays.asList(
            "D·∫° v√¢ng, ƒë·ªÉ em t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, anh/ch·ªã cho em h·ªèi anh/ch·ªã th∆∞·ªùng s·ª≠ d·ª•ng ƒëi·ªán tho·∫°i v√†o m·ª•c ƒë√≠ch g√¨ ·∫°? Ch·ª•p ·∫£nh, ch∆°i game, l√†m vi·ªác hay ƒëa nƒÉng? Budget c·ªßa anh/ch·ªã kho·∫£ng bao nhi√™u ·∫°? üéØ",
            "Em r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ ·∫°! üòä Anh/ch·ªã c√≥ th·ªÉ chia s·∫ª nhu c·∫ßu s·ª≠ d·ª•ng ch√≠nh v√† t·∫ßm gi√° ƒëang c√¢n nh·∫Øc kh√¥ng ·∫°? T·ª´ ƒë√≥ em s·∫Ω g·ª£i √Ω nh·ªØng m·∫´u m√°y ph√π h·ª£p nh·∫•t v·ªõi anh/ch·ªã! üì±‚ú®",
            "D·∫°, ƒë·ªÉ em t∆∞ v·∫•n t·ªët nh·∫•t, anh/ch·ªã cho em bi·∫øt anh/ch·ªã quan t√¢m ƒë·∫øn y·∫øu t·ªë n√†o nh·∫•t khi ch·ªçn ƒëi·ªán tho·∫°i ·∫°? Pin tr√¢u, camera x·ªãn, c·∫•u h√¨nh m·∫°nh hay thi·∫øt k·∫ø ƒë·∫πp? Ng√¢n s√°ch anh/ch·ªã d·ª± ki·∫øn l√† bao nhi√™u ·∫°? üîãüì∏üí™"
    );

    private final Pattern greetingPattern = Pattern.compile("(?i).*(ch√†o|hi|hello|alo|xin ch√†o|chao|hey|k√≠nh ch√†o|ch√†o b·∫°n).*");
    private final Pattern promotionPattern = Pattern.compile("(?i).*(gi·∫£m|khuy·∫øn m√£i|∆∞u ƒë√£i|khuy·∫øn m·∫°i|sale|gi√° t·ªët|ƒëang c√≥|qu√†|t·∫∑ng|tr·∫£ g√≥p|gi·∫£m gi√°|voucher).*");
    private final Pattern unclearPattern = Pattern.compile("(?i).*(t∆∞ v·∫•n|kh√¥ng bi·∫øt|g·ª£i √Ω|n√™n mua|ph√π h·ª£p|ch·ªçn|h·ªèi|gi√∫p|g√≥p √Ω|√Ω ki·∫øn|suggest|recommend).*");
    private final Pattern pricePattern = Pattern.compile("(?i).*(gi√°|bao nhi√™u|gi√° c·∫£|gi√° ti·ªÅn|m·∫•y tri·ªáu|ti·ªÅn|chi ph√≠).*");
    private final Pattern comparePattern = Pattern.compile("(?i).*(so s√°nh|h∆°n|thua|vs|versus|hay l√†|hay|ho·∫∑c|so v·ªõi|t·ªët h∆°n).*");
    private final Pattern featurePattern = Pattern.compile("(?i).*(pin|camera|m√†n h√¨nh|c·∫•u h√¨nh|chip|hi·ªáu nƒÉng|ch∆°i game|ch·ª•p|quay|selfie|dung l∆∞·ª£ng|ram|b·ªô nh·ªõ|s·∫°c).*");

    public ChatResponse processUserMessage(Long userId, String userMessage) {
        LocalTime currentTime = LocalTime.now();
        boolean isEvening = currentTime.getHour() >= 18 || currentTime.getHour() < 5;
        String timeGreeting = isEvening ? "Ch√†o bu·ªïi t·ªëi" : "Ch√†o";

        long messageCount = messageRepository.countBySenderId(userId);
        boolean isNewUser = messageCount <= 2;

        String intent = detectIntent(userMessage);
        String aiReply;

        if (intent.equals("greeting")) {
            String greeting = getRandomMessage(greetings);
            if (isNewUser) {
                greeting = timeGreeting + greeting.substring(greeting.indexOf(" ")) + " R·∫•t vui ƒë∆∞·ª£c ph·ª•c v·ª• anh/ch·ªã l·∫ßn ƒë·∫ßu! üåü";
            }
            aiReply = greeting;

        } else if (intent.equals("promotion")) {
            aiReply = getRandomMessage(promotions);

        } else if (intent.equals("unclear")) {
            aiReply = getRandomMessage(unclear);

        } else if (intent.equals("price_inquiry")) {
            String keyword = extractProductKeyword(userMessage);
            List<Product> matchedProducts = productRepository.findTop3ByNameContainingIgnoreCase(keyword);

            String prompt = buildPriceInquiryPrompt(userMessage, matchedProducts);
            aiReply = openAiClient.ask(prompt);

        } else if (intent.equals("comparison")) {
            String[] keywords = extractComparisonKeywords(userMessage);
            List<Product> products1 = productRepository.findTop2ByNameContainingIgnoreCase(keywords[0]);
            List<Product> products2 = productRepository.findTop2ByNameContainingIgnoreCase(keywords[1]);

            String prompt = buildComparisonPrompt(userMessage, products1, products2);
            aiReply = openAiClient.ask(prompt);

        } else if (intent.equals("feature_inquiry")) {
            String keyword = extractProductKeyword(userMessage);
            List<Product> matchedProducts = productRepository.findTop3ByNameContainingIgnoreCase(keyword);

            String featureType = detectFeatureType(userMessage);
            String prompt = buildFeatureInquiryPrompt(userMessage, matchedProducts, featureType);
            aiReply = openAiClient.ask(prompt);

        } else if (intent.equals("best_seller")) {
            List<Product> topSelling = productRepository.findTop3ByOrderBySoldQuantityDesc();
            if (!topSelling.isEmpty()) {
                String prompt = buildBestSellerPrompt(userMessage, topSelling);
                aiReply = openAiClient.ask(prompt);
            } else {
                aiReply = """
R·∫•t ti·∫øc hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë·ªß ƒëi·ªÅu ki·ªán "best seller" ·∫° üò¢
Nh∆∞ng shop c√≥ nhi·ªÅu m·∫´u hot ƒëang ƒë∆∞·ª£c kh√°ch h√†ng quan t√¢m. Anh/ch·ªã mu·ªën t∆∞ v·∫•n theo ph√¢n kh√∫c n√†o kh√¥ng ·∫°? üì±
""";
            }

        } else {
            String keyword = extractProductKeyword(userMessage);
            List<Product> matchedProducts = productRepository.findTop5ByNameContainingIgnoreCase(keyword);

            if (!matchedProducts.isEmpty()) {
                String prompt = buildProductInquiryPrompt(userMessage, matchedProducts, isNewUser);
                aiReply = openAiClient.ask(prompt);
            } else {
                String prompt = buildNoProductPrompt(userMessage, isNewUser);
                aiReply = openAiClient.ask(prompt);
            }
        }

        saveMessage(userId, BOT_ID, userMessage);
        saveMessage(BOT_ID, userId, aiReply);

        return new ChatResponse(aiReply);
    }

    @Cacheable("searchKeywords")
    private String extractProductKeyword(String userMessage) {
        // Ki·ªÉm tra cache
        String cacheKey = userMessage.toLowerCase();
        if (searchCache.containsKey(cacheKey)) {
            logger.info("Cache hit for: {}", userMessage);
            return searchCache.get(cacheKey);
        }

        // Chu·∫©n h√≥a c∆° b·∫£n
        String cleanedMessage = userMessage
                .replaceAll("(?i)shop c√≥|c√≥.*kh√¥ng|mua|gi√°.*bao nhi√™u|bao nhi√™u ti·ªÅn|gi√° c·∫£|t∆∞ v·∫•n|so s√°nh|v·ªõi|hay l√†|cho t√¥i xem", "")
                .replaceAll("[^a-zA-Z0-9√Ä-·ªπ ]", "")
                .replaceAll("\\s+", " ")
                .trim()
                .toLowerCase();

        logger.info("Cleaned message: {}", cleanedMessage);

        // T√°ch th√†nh tokens (1 t·ª´, 2 t·ª´, 3 t·ª´)
        String[] words = cleanedMessage.split(" ");
        List<String> tokens = new ArrayList<>();
        for (int i = 1; i <= Math.min(3, words.length); i++) {
            for (int j = 0; j <= words.length - i; j++) {
                String token = String.join(" ", Arrays.copyOfRange(words, j, j + i));
                if (token.length() > 3) {
                    tokens.add(token);
                }
            }
        }

        logger.info("Tokens: {}", tokens);

        // G·ªçi API ƒë·ªÉ t√¨m s·∫£n ph·∫©m
        String bestMatch = cleanedMessage;
        int bestScore = Integer.MAX_VALUE;
        String bestProductName = cleanedMessage;

        for (String token : tokens) {
            try {
                // G·ªçi API /api/products v√† ch·ªâ l·∫•y content (danh s√°ch s·∫£n ph·∫©m)
                String url = PRODUCT_API_URL + "?searchKeyword=" + token + "&page=0&size=5";
                ResponseEntity<Map<String, Object>> response = restTemplate.exchange(
                        url,
                        HttpMethod.GET,
                        null,
                        new ParameterizedTypeReference<Map<String, Object>>() {}
                );

                Map<String, Object> responseBody = response.getBody();
                if (responseBody != null && responseBody.containsKey("content")) {
                    List<Map<String, Object>> productList = (List<Map<String, Object>>) responseBody.get("content");
                    for (Map<String, Object> product : productList) {
                        String productName = (String) product.get("name");
                        if (productName != null) {
                            String normalizedProductName = normalizeVietnamese(productName.toLowerCase());
                            String normalizedToken = normalizeVietnamese(token);
                            int distance = levenshteinDistance(normalizedToken, normalizedProductName);

                            if (distance < bestScore && distance <= normalizedToken.length() / 2) {
                                bestScore = distance;
                                bestMatch = token;
                                bestProductName = productName;
                            }
                        }
                    }
                } else {
                    logger.debug("No products found for token: {}", token);
                }
            } catch (Exception e) {
                logger.warn("Error calling product API for token {}: {}", token, e.getMessage());
            }
        }

        // Chu·∫©n h√≥a l·∫°i bestProductName ƒë·ªÉ lo·∫°i b·ªè t·ª´ kh√¥ng li√™n quan
        bestProductName = bestProductName
                .replaceAll("(?i)shop c√≥|c√≥.*kh√¥ng|mua|gi√°.*bao nhi√™u|bao nhi√™u ti·ªÅn|gi√° c·∫£|t∆∞ v·∫•n|so s√°nh|v·ªõi|hay l√†|cho t√¥i xem", "")
                .replaceAll("[^a-zA-Z0-9√Ä-·ªπ ]", "")
                .replaceAll("\\s+", " ")
                .trim();

        // L∆∞u v√†o cache
        searchCache.put(cacheKey, bestProductName);
        logger.info("Best matched product: {}", bestProductName);

        return bestProductName;
    }

    // Thu·∫≠t to√°n Levenshtein
    private int levenshteinDistance(String s1, String s2) {
        int[][] dp = new int[s1.length() + 1][s2.length() + 1];

        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0) {
                    dp[i][j] = j;
                } else if (j == 0) {
                    dp[i][j] = i;
                } else {
                    dp[i][j] = Math.min(
                            Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1),
                            dp[i - 1][j - 1] + (s1.charAt(i - 1) == s2.charAt(j - 1) ? 0 : 1)
                    );
                }
            }
        }

        return dp[s1.length()][s2.length()];
    }

    private String getRandomMessage(List<String> messages) {
        return messages.get(random.nextInt(messages.size()));
    }

    private String detectIntent(String message) {
        String lower = message.toLowerCase();

        if (greetingPattern.matcher(lower).matches()) {
            return "greeting";
        }
        if (promotionPattern.matcher(lower).matches()) {
            return "promotion";
        }
        if (pricePattern.matcher(lower).matches()) {
            return "price_inquiry";
        }
        if (comparePattern.matcher(lower).matches()) {
            return "comparison";
        }
        if (featurePattern.matcher(lower).matches()) {
            return "feature_inquiry";
        }
        if (unclearPattern.matcher(lower).matches()) {
            return "unclear";
        }

        return "product_inquiry";
    }

    private String[] extractComparisonKeywords(String userMessage) {
        String[] keywords = new String[2];
        String normalized = userMessage.toLowerCase()
                .replaceAll("(?i)so s√°nh", "")
                .replaceAll("(?i)gi·ªØa", "");

        if (normalized.contains(" v·ªõi ")) {
            String[] parts = normalized.split(" v·ªõi ");
            keywords[0] = parts[0].trim();
            keywords[1] = parts[1].trim();
        } else if (normalized.contains(" v√† ")) {
            String[] parts = normalized.split(" v√† ");
            keywords[0] = parts[0].trim();
            keywords[1] = parts[1].trim();
        } else if (normalized.contains(" hay ")) {
            String[] parts = normalized.split(" hay ");
            keywords[0] = parts[0].trim();
            keywords[1] = parts[1].trim();
        } else if (normalized.contains(" ho·∫∑c ")) {
            String[] parts = normalized.split(" ho·∫∑c ");
            keywords[0] = parts[0].trim();
            keywords[1] = parts[1].trim();
        } else {
            String[] words = normalized.split(" ");
            int midPoint = words.length / 2;

            StringBuilder part1 = new StringBuilder();
            for (int i = 0; i < midPoint; i++) {
                part1.append(words[i]).append(" ");
            }

            StringBuilder part2 = new StringBuilder();
            for (int i = midPoint; i < words.length; i++) {
                part2.append(words[i]).append(" ");
            }

            keywords[0] = part1.toString().trim();
            keywords[1] = part2.toString().trim();
        }

        return keywords;
    }

    private String detectFeatureType(String message) {
        String lower = message.toLowerCase();

        if (lower.contains("pin") || lower.contains("dung l∆∞·ª£ng") || lower.contains("s·∫°c") || lower.contains("battery")) {
            return "Pin";
        }
        if (lower.contains("camera") || lower.contains("ch·ª•p") || lower.contains("quay") || lower.contains("selfie")) {
            return "Camera";
        }
        if (lower.contains("m√†n h√¨nh") || lower.contains("display") || lower.contains("screen")) {
            return "M√†n h√¨nh";
        }
        if (lower.contains("c·∫•u h√¨nh") || lower.contains("hi·ªáu nƒÉng") || lower.contains("chip") || lower.contains("x·ª≠ l√Ω") || lower.contains("processor")) {
            return "Hi·ªáu nƒÉng";
        }
        if (lower.contains("ram") || lower.contains("b·ªô nh·ªõ") || lower.contains("memory") || lower.contains("l∆∞u tr·ªØ") || lower.contains("storage")) {
            return "B·ªô nh·ªõ";
        }

        return "T√≠nh nƒÉng";
    }

    private String getProductHighlight(Product product) {
        String name = product.getName().toLowerCase();

        if (name.contains("iphone")) {
            return "Thi·∫øt k·∫ø sang tr·ªçng, hi·ªáu nƒÉng m·∫°nh m·∫Ω";
        } else if (name.contains("samsung")) {
            if (name.contains("s") || name.contains("note") || name.contains("fold")) {
                return "M√†n h√¨nh ƒë·∫πp, camera ch·ª•p ƒë√™m xu·∫•t s·∫Øc";
            } else {
                return "C√¢n b·∫±ng gi√°/hi·ªáu nƒÉng, pin tr√¢u";
            }
        } else if (name.contains("xiaomi") || name.contains("redmi")) {
            return "Gi√° r·∫ª, c·∫•u h√¨nh cao, pin tr√¢u";
        } else if (name.contains("oppo")) {
            return "Camera selfie ƒë·ªânh, s·∫°c si√™u nhanh";
        } else if (name.contains("vivo")) {
            return "Camera ch·ª•p ƒë√™m t·ªët, thi·∫øt k·∫ø m·ªèng nh·∫π";
        } else {
            return "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao";
        }
    }

    private String getProductFeature(Product product, String featureType) {
        String name = product.getName().toLowerCase();

        if (featureType.equals("Pin")) {
            if (name.contains("iphone")) {
                return "3000-4300mAh, s·∫°c nhanh 20W";
            } else if (name.contains("samsung")) {
                return "4000-5000mAh, s·∫°c nhanh 25W";
            } else {
                return "5000-6000mAh, s·∫°c si√™u nhanh 33W-67W";
            }
        } else if (featureType.equals("Camera")) {
            if (name.contains("iphone")) {
                return "12-48MP, Night Mode, Cinema Mode";
            } else if (name.contains("samsung")) {
                if (name.contains("s") || name.contains("note")) {
                    return "50-108MP, Night Mode, Space Zoom";
                } else {
                    return "32-64MP, ch·ª•p g√≥c r·ªông";
                }
            } else {
                return "50-64MP, AI Camera, ch·ª•p ƒë√™m t·ªët";
            }
        } else if (featureType.equals("M√†n h√¨nh")) {
            if (name.contains("iphone")) {
                return "OLED, Super Retina XDR";
            } else if (name.contains("samsung")) {
                if (name.contains("s") || name.contains("note")) {
                    return "Dynamic AMOLED 2X, 120Hz";
                } else {
                    return "Super AMOLED, 90Hz";
                }
            } else {
                return "AMOLED, 120Hz, DotDisplay";
            }
        } else if (featureType.equals("Hi·ªáu nƒÉng")) {
            if (name.contains("iphone")) {
                return "Chip A-Series, hi·ªáu nƒÉng h√†ng ƒë·∫ßu";
            } else if (name.contains("samsung")) {
                if (name.contains("s") || name.contains("note")) {
                    return "Exynos/Snapdragon m·ªõi nh·∫•t";
                } else {
                    return "Exynos/Snapdragon d√≤ng trung";
                }
            } else {
                return "MediaTek Dimensity/Snapdragon 8xx";
            }
        } else if (featureType.equals("B·ªô nh·ªõ")) {
            if (name.contains("iphone")) {
                return "128GB-1TB, kh√¥ng h·ªó tr·ª£ th·∫ª nh·ªõ";
            } else if (name.contains("samsung")) {
                return "128GB-512GB, h·ªó tr·ª£ th·∫ª nh·ªõ ƒë·∫øn 1TB";
            } else {
                return "64GB-256GB, h·ªó tr·ª£ th·∫ª nh·ªõ ƒë·∫øn 1TB";
            }
        } else {
            return "T√≠nh nƒÉng hi·ªán ƒë·∫°i, ph√π h·ª£p nhu c·∫ßu";
        }
    }

    private String normalizeVietnamese(String text) {
        String normalized = Normalizer.normalize(text, Normalizer.Form.NFD);
        Pattern pattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");
        return pattern.matcher(normalized).replaceAll("");
    }

    private void saveMessage(Long senderId, Long receiverId, String content) {
        Message message = new Message();
        message.setSenderId(senderId);
        message.setReceiverId(receiverId);
        message.setContent(content);
        message.setRead(false);
        messageRepository.save(message);
    }

    private String formatCurrency(BigDecimal amount) {
        return NumberFormat.getCurrencyInstance(locale).format(amount);
    }

    private String buildProductInquiryPrompt(String userMessage, List<Product> products, boolean isNewUser) {
        StringBuilder builder = new StringBuilder();
        for (Product p : products) {
            builder.append(String.format(
                    "- %s (ID: %d) | Gi√°: %s | C√≤n %d chi·∫øc | üíé %s\n",
                    p.getName(),
                    p.getId(),
                    formatCurrency(p.getSellingPrice()),
                    p.getStock(),
                    getProductHighlight(p)
            ));
        }

        return String.format("""
Ng∆∞·ªùi d√πng h·ªèi: "%s"

üì¶ D∆∞·ªõi ƒë√¢y l√† s·∫£n ph·∫©m ph√π h·ª£p:

%s

üíÅ‚Äç‚ôÄÔ∏è H∆Ø·ªöNG D·∫™N T∆Ø V·∫§N:
1. Tr·∫£ l·ªùi nh∆∞ nh√¢n vi√™n b√°n h√†ng CHUY√äN NGHI·ªÜP & TH√ÇN THI·ªÜN. G·ªçi kh√°ch l√† "anh/ch·ªã".
2. LU√îN ƒê·ªÄ XU·∫§T 1-2 m·∫´u c·ª• th·ªÉ t·ª´ danh s√°ch tr√™n, k√®m 2-3 ∆∞u ƒëi·ªÉm n·ªïi b·∫≠t.
3. Nh·∫•n m·∫°nh c√°c ∆∞u ƒë√£i: "Tr·∫£ g√≥p 0%%", "B·∫£o h√†nh 18 th√°ng", "T·∫∑ng ph·ª• ki·ªán ch√≠nh h√£ng".
4. K·∫æT TH√öC b·∫±ng c√¢u h·ªèi g·ª£i m·ªü ƒë·ªÉ kh√°ch mua ngay: "Anh/ch·ªã mu·ªën em ƒë·∫∑t h√†ng lu√¥n kh√¥ng ·∫°?" ho·∫∑c "Anh/ch·ªã c√≥ th·ªÉ gh√© shop xem tr·ª±c ti·∫øp, em s·∫Ω t∆∞ v·∫•n t·∫≠n t√¨nh!"
5. S·ª≠ d·ª•ng emoji ph√π h·ª£p nh∆∞ng kh√¥ng qu√° l·∫°m d·ª•ng.
6. %s

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, d∆∞·ªõi 150 t·ª´, kh√¥ng li·ªát k√™ th√¥ng s·ªë k·ªπ thu·∫≠t d√†i d√≤ng.
""", userMessage, builder, isNewUser ? "ƒê√¢y l√† kh√°ch h√†ng M·ªöI, h√£y nhi·ªát t√¨nh H∆†N N·ªÆA!" : "Th·ªÉ hi·ªán s·ª± chuy√™n nghi·ªáp v√† am hi·ªÉu v·ªÅ s·∫£n ph·∫©m.");
    }

    private String buildNoProductPrompt(String userMessage, boolean isNewUser) {
        return String.format("""
Ng∆∞·ªùi d√πng h·ªèi: "%s"

‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c·ª• th·ªÉ. 

üíÅ‚Äç‚ôÄÔ∏è H∆Ø·ªöNG D·∫™N T∆Ø V·∫§N:
1. Xin l·ªói kh√°ch m·ªôt c√°ch CHUY√äN NGHI·ªÜP v√¨ kh√¥ng c√≥ s·∫£n ph·∫©m h·ªç ƒëang t√¨m.
2. ƒê·ªÄ XU·∫§T 2-3 s·∫£n ph·∫©m T∆Ø∆†NG T·ª∞ ho·∫∑c THAY TH·∫æ t·ªët nh·∫•t trong c√πng ph√¢n kh√∫c/h√£ng.
3. G·ª£i √Ω kh√°ch ƒë·ªÉ l·∫°i S·ªê ƒêI·ªÜN THO·∫†I ƒë·ªÉ ƒë∆∞·ª£c th√¥ng b√°o ngay khi c√≥ h√†ng.
4. Nh·∫•n m·∫°nh: "Shop c√≥ d·ªãch v·ª• ƒë·∫∑t tr∆∞·ªõc v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát"
5. K·∫æT TH√öC v·ªõi l·ªùi m·ªùi gh√© thƒÉm shop ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp v·ªÅ c√°c s·∫£n ph·∫©m thay th·∫ø t·ªët nh·∫•t.
6. %s

Tr·∫£ l·ªùi th√¢n thi·ªán, chuy√™n nghi·ªáp, s·ª≠ d·ª•ng √≠t emoji ph√π h·ª£p.
""", userMessage, isNewUser ? "ƒê√¢y l√† kh√°ch h√†ng M·ªöI, h√£y √ÇN C·∫¶N v√† NHI·ªÜT T√åNH h∆°n!" : "Th·ªÉ hi·ªán s·ª± th√¥ng c·∫£m v√† mong mu·ªën h·ªó tr·ª£.");
    }

    private String buildPriceInquiryPrompt(String userMessage, List<Product> products) {
        StringBuilder builder = new StringBuilder();
        for (Product p : products) {
            BigDecimal price = p.getDiscountedPrice() != null ? p.getDiscountedPrice() : p.getSellingPrice();
            BigDecimal original = p.getDiscountedPrice() != null ? p.getSellingPrice() : p.getCostPrice();

            builder.append(String.format(
                    "- %s | Gi√° khuy·∫øn m√£i: %s | Gi√° g·ªëc: %s | C√≤n %d sp\n",
                    p.getName(),
                    formatCurrency(price),
                    formatCurrency(original),
                    p.getStock()
            ));
        }

        return String.format("""
Ng∆∞·ªùi d√πng h·ªèi v·ªÅ GI√Å: "%s"

üí∞ Th√¥ng tin gi√° s·∫£n ph·∫©m:

%s

üíÅ‚Äç‚ôÄÔ∏è H∆Ø·ªöNG D·∫™N T∆Ø V·∫§N:
1. Tr·∫£ l·ªùi NH∆Ø NH√ÇN VI√äN B√ÅN H√ÄNG TH·ª∞C TH·ª§, g·ªçi kh√°ch l√† "anh/ch·ªã".
2. Nh·∫•n m·∫°nh gi√° KHUY·∫æN M√ÉI h∆°n gi√° g·ªëc.
3. N√™u r√µ c√°c H√åNH TH·ª®C THANH TO√ÅN: "Tr·∫£ g√≥p 0%%", "Thanh to√°n qua th·∫ª gi·∫£m th√™m 5%%".
4. Nh·∫•n m·∫°nh t√≠nh KHAN HI·∫æM: "Ch·ªâ c√≤n X chi·∫øc v·ªõi gi√° n√†y", "∆Øu ƒë√£i c√≥ th·ªùi h·∫°n".
5. ƒê·ªÄ XU·∫§T mua ngay: "Anh/ch·ªã mu·ªën em gi·ªØ m√°y kh√¥ng ·∫°?" ho·∫∑c "Em c√≥ th·ªÉ t∆∞ v·∫•n th√™m v·ªÅ th·ªß t·ª•c tr·∫£ g√≥p n·∫øu anh/ch·ªã quan t√¢m!"

S·ª≠ d·ª•ng emoji ph√π h·ª£p, t·∫°o c·∫£m gi√°c th√¢n thi·ªán nh∆∞ng v·∫´n chuy√™n nghi·ªáp.
""", userMessage, builder);
    }

    private String buildComparisonPrompt(String userMessage, List<Product> products1, List<Product> products2) {
        StringBuilder builder = new StringBuilder();

        builder.append("üì± S·∫¢N PH·∫®M NH√ìM 1:\n");
        for (Product p : products1) {
            builder.append(String.format(
                    "- %s | Gi√°: %s | üíé %s\n",
                    p.getName(),
                    formatCurrency(p.getSellingPrice()),
                    getProductHighlight(p)
            ));
        }

        builder.append("\nüì± S·∫¢N PH·∫®M NH√ìM 2:\n");
        for (Product p : products2) {
            builder.append(String.format(
                    "- %s | Gi√°: %s | üíé %s\n",
                    p.getName(),
                    formatCurrency(p.getSellingPrice()),
                    getProductHighlight(p)
            ));
        }

        return String.format("""
Ng∆∞·ªùi d√πng y√™u c·∫ßu SO S√ÅNH: "%s"

%s

üíÅ‚Äç‚ôÄÔ∏è H∆Ø·ªöNG D·∫™N T∆Ø V·∫§N:
1. SO S√ÅNH CHUY√äN NGHI·ªÜP gi·ªØa hai nh√≥m s·∫£n ph·∫©m, n√™u b·∫≠t ∆∞u ƒëi·ªÉm c·ªßa m·ªói b√™n.
2. ƒê·ªÄ XU·∫§T R√ï R√ÄNG m·ªôt l·ª±a ch·ªçn t·ªët h∆°n d·ª±a tr√™n nhu c·∫ßu kh√°ch h√†ng.
3. Nh·∫•n m·∫°nh L·ª¢I √çCH c·ª• th·ªÉ cho t·ª´ng ƒë·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng.
4. K·∫æT TH√öC v·ªõi g·ª£i √Ω: "Anh/ch·ªã c√≥ th·ªÉ d√πng th·ª≠ c·∫£ hai s·∫£n ph·∫©m t·∫°i shop" ho·∫∑c "Em nghƒ© [s·∫£n ph·∫©m X] ph√π h·ª£p h∆°n v·ªõi nhu c·∫ßu c·ªßa anh/ch·ªã, anh/ch·ªã c√≥ mu·ªën ƒë·∫∑t h√†ng lu√¥n kh√¥ng ·∫°?"

Gi·ªçng ƒëi·ªáu th√¢n thi·ªán, am hi·ªÉu, t·ª± tin nh∆∞ng kh√¥ng √°p ƒë·∫∑t. S·ª≠ d·ª•ng emoji ph√π h·ª£p.
""", userMessage, builder);
    }

    private String buildFeatureInquiryPrompt(String userMessage, List<Product> products, String featureType) {
        StringBuilder builder = new StringBuilder();
        for (Product p : products) {
            builder.append(String.format(
                    "- %s | Gi√°: %s | %s: %s\n",
                    p.getName(),
                    formatCurrency(p.getSellingPrice()),
                    featureType,
                    getProductFeature(p, featureType)
            ));
        }

        return String.format("""
Ng∆∞·ªùi d√πng h·ªèi v·ªÅ T√çNH NƒÇNG %s: "%s"

üìä Th√¥ng tin s·∫£n ph·∫©m:

%s

üíÅ‚Äç‚ôÄÔ∏è H∆Ø·ªöNG D·∫™N T∆Ø V·∫§N:
1. Tr·∫£ l·ªùi nh∆∞ CHUY√äN GIA v·ªÅ %s, gi·∫£i th√≠ch r√µ ∆∞u ƒëi·ªÉm c·ªßa m·ªói s·∫£n ph·∫©m.
2. S·ª≠ d·ª•ng ng√¥n ng·ªØ D·ªÑ HI·ªÇU nh∆∞ng v·∫´n th·ªÉ hi·ªán ki·∫øn th·ª©c chuy√™n m√¥n.
3. ƒê·ªÄ XU·∫§T c·ª• th·ªÉ 1-2 s·∫£n ph·∫©m t·ªët nh·∫•t v·ªÅ %s.
4. So s√°nh NG·∫ÆN G·ªåN v·ªõi ƒë·ªëi th·ªß c·∫°nh tranh (n·∫øu ph√π h·ª£p).
5. K·∫æT TH√öC v·ªõi c√¢u h·ªèi m·ªü: "Anh/ch·ªã quan t√¢m ƒë·∫øn model n√†o h∆°n ·∫°?" ho·∫∑c "Em c√≥ th·ªÉ t∆∞ v·∫•n chi ti·∫øt h∆°n v·ªÅ [s·∫£n ph·∫©m ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t] kh√¥ng ·∫°?"

S·ª≠ d·ª•ng 2-3 emoji ph√π h·ª£p, tr·∫£ l·ªùi chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán.
""", featureType.toUpperCase(), userMessage, builder, featureType, featureType);
    }

    private String buildBestSellerPrompt(String userMessage, List<Product> products) {
        StringBuilder builder = new StringBuilder();
        for (Product p : products) {
            BigDecimal price = p.getDiscountedPrice() != null ? p.getDiscountedPrice() : p.getSellingPrice();
            builder.append(String.format("- %s | Gi√°: %s | ƒê√£ b√°n: %d sp\n",
                    p.getName(), formatCurrency(price), p.getSoldQuantity()));
        }

        return String.format("""
üìà Ng∆∞·ªùi d√πng h·ªèi: "%s"

D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ƒëang b√°n ch·∫°y nh·∫•t t·∫°i shop:

%s

üéØ H√£y tr·∫£ l·ªùi th√¢n thi·ªán, khuy·∫øn kh√≠ch mua h√†ng. N·∫øu s·∫£n ph·∫©m ph√π h·ª£p, m·ªùi ch·ªët ƒë∆°n nh·∫π c√°i nha!
""", userMessage, builder);
    }
}