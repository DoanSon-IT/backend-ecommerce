package com.sondv.phone.repository;

import com.sondv.phone.entity.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

public interface ProductRepository extends JpaRepository<Product, Long> {

    // üîç T√¨m theo t√™n s·∫£n ph·∫©m
    List<Product> findTop3ByNameContainingIgnoreCase(String keyword);
    List<Product> findTop2ByNameContainingIgnoreCase(String keyword);
    List<Product> findTop5ByNameContainingIgnoreCase(String keyword);
    Optional<Product> findFirstByNameContainingIgnoreCase(String keyword);
    Page<Product> findByNameContainingIgnoreCase(String name, Pageable pageable);

    // üõí T√¨m theo danh m·ª•c
    List<Product> findByCategoryId(Long categoryId);
    List<Product> findByCategoryIdAndSellingPriceLessThan(Long categoryId, BigDecimal price);

    // üõçÔ∏è Top b√°n ch·∫°y
    List<Product> findTop5ByOrderBySoldQuantityDesc();

    List<Product> findTop3ByOrderBySoldQuantityDesc();

    // üì¶ H·∫øt h√†ng / c√≤n √≠t
    List<Product> findByStockLessThan(int threshold);

    // üí° G·ª£i √Ω n·ªïi b·∫≠t
    List<Product> findByIsFeaturedTrue();
    List<Product> findAllByOrderByIdDesc();

    // üîª Gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n
    List<Product> findByDiscountEndDateBefore(LocalDateTime dateTime);

    // üìä B√°n ch·∫°y theo s·ªë l∆∞·ª£ng
    List<Product> findBySoldQuantityGreaterThan(int quantity);

    // üß† So s√°nh / l·ªçc m·ªü r·ªông
    List<Product> findByNameInIgnoreCase(List<String> names); // So s√°nh 2 s·∫£n ph·∫©m
    List<Product> findBySellingPriceLessThan(BigDecimal maxPrice); // S·∫£n ph·∫©m gi√° r·∫ª
    List<Product> findBySellingPriceGreaterThan(BigDecimal minPrice); // S·∫£n ph·∫©m cao c·∫•p
    List<Product> findByNameContainingIgnoreCaseAndSellingPriceLessThan(String keyword, BigDecimal maxPrice);
    List<Product> findByNameContainingIgnoreCaseAndSellingPriceGreaterThan(String keyword, BigDecimal minPrice);

    // üñºÔ∏è T·∫£i k√®m ·∫£nh, danh m·ª•c, nh√† cung c·∫•p
    @EntityGraph(attributePaths = {"images", "category", "supplier"})
    @Query("SELECT p FROM Product p")
    List<Product> findAllWithCategoryAndSupplier();

    // üî¢ Tu·ª≥ bi·∫øn l·∫•y top N
    @Query("SELECT p FROM Product p ORDER BY p.soldQuantity DESC")
    List<Product> findTopNByOrderBySoldQuantityDesc(org.springframework.data.domain.Pageable pageable);
}
